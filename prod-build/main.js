/*! For license information please see main.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./src/index.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{eval('(__webpack_require__(/*! dotenv */ "dotenv").config)();\nconst express = __webpack_require__(/*! express */ "express");\nconst cors = __webpack_require__(/*! cors */ "cors");\n//require(\'./db/mongoose\');\nconst bodyparser = __webpack_require__(/*! body-parser */ "body-parser");\nconst app = express();\napp.use(bodyparser.urlencoded({\n  extended: false\n}));\napp.use(bodyparser.json());\nconst userRoutes = __webpack_require__(/*! ./routes/user */ "./src/routes/user.js");\nconst paymentRoutes = __webpack_require__(/*! ./routes/payment */ "./src/routes/payment.js");\nconst env = process.env.ENVIRONMENT;\nconst cert = process.env.SSL_CERT;\nconst priv_key = process.env.SSL_PRIV_KEY;\nlet port = process.env.LOCAL_PORT;\nconsole.log(port);\nif (env == "PROD") {\n  port = process.env.PROD_PORT;\n}\napp.use(express.json());\napp.use(cors());\napp.use(userRoutes);\napp.use(paymentRoutes);\napp.listen(port, () => {\n  console.log(\'working on port\' + port);\n});\n\n//# sourceURL=webpack://leaf-backend/./src/index.js?')},"./src/models/User.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst validator = __webpack_require__(/*! validator */ "validator");\nconst bcrypt = __webpack_require__(/*! bcrypt */ "bcrypt");\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true,\n    minlength: 2\n  },\n  business_name: {\n    type: String,\n    required: true,\n    trim: true,\n    minlength: 2\n  },\n  email: {\n    type: String,\n    required: true,\n    trim: true,\n    unique: true,\n    validate(value) {\n      if (!validator.isEmail(value)) {\n        throw new Error(\'Not valid email\');\n      }\n      return true;\n    }\n  },\n  password: {\n    type: String,\n    required: true,\n    trim: true,\n    minlength: 6\n  }\n});\nuserSchema.statics.findByCredentials = async (email, password) => {\n  const user = await User.findOne({\n    email\n  });\n  if (!user) {\n    throw new Error("user not found");\n  }\n  const isMatch = await bcrypt.compare(password, user.password);\n  if (!isMatch) {\n    throw new Error("InValid Credentials");\n  }\n  return user;\n};\nuserSchema.pre("save", async function (next) {\n  const user = this;\n  if (user.isModified(\'password\')) {\n    user.password = await bcrypt.hash(user.password, 8);\n  }\n  next();\n});\nconst User = mongoose.model(\'User\', userSchema);\nmodule.exports = User;\n\n//# sourceURL=webpack://leaf-backend/./src/models/User.js?')},"./src/routes/payment.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst Mailgen = __webpack_require__(/*! mailgen */ "mailgen");\n// const router =\nconst router = new express.Router();\nconst nodemailer = __webpack_require__(/*! nodemailer */ "nodemailer");\nconst stripe = __webpack_require__(/*! stripe */ "stripe")("sk_test_51LD42cSJb05mAKIhulGhSsRo6e7v8OAA4IdkNBkCQPwIacUSOFybWXogCp3m1aDJ3CGrKvsPIk6gS2hGGJbAwjjN00LEG1yqfb");\nconst uuid = (__webpack_require__(/*! uuid */ "uuid").v4);\nrouter.post("/api/send-email", async (req, res) => {\n  console.log("email::", req.body.email);\n  let config = {\n    service: \'gmail\',\n    auth: {\n      user: \'qa.pamsar@gmail.com\',\n      pass: \'mqfnssojgtnghbyb\'\n    }\n  };\n  var today = new Date();\n  var dd = today.getDate();\n  var mm = today.getMonth() + 1;\n  var yyyy = today.getFullYear();\n  if (dd < 10) {\n    dd = \'0\' + dd;\n  }\n  if (mm < 10) {\n    mm = \'0\' + mm;\n  }\n  var today = dd + \'/\' + mm + \'/\' + yyyy;\n  let transporter = nodemailer.createTransport(config);\n  let message = {\n    from: \'qa.pamsar@gmail.com\',\n    to: req.body.email,\n    subject: "Promotion created",\n    html: `\n    <h2>Promotion Details</h2>\n    <p>Payment for the promotion on leaf bussiness is successfull</p>\n    <ul>\n      <li><strong>Date: </strong>${today}</li>\n      <li><strong>Name: </strong>${req.body.name}</li>\n      <li><strong>User Address: </strong>${req.body.address}</li>\n      <li><strong>User Postal Code: </strong>${req.body.postal_code}</li>\n      <li><strong>User State: </strong>${req.body.state}</li>\n      <li><strong>User Country: </strong>${req.body.country}</li>\n      <li><strong>User Email: </strong>${req.body.email}</li>\n      <li><strong>Business Name: </strong>${req.body.buss_name}</li>\n      <li><strong>Business Address: </strong>${req.body.buss_address}</li>\n      <li><strong>Business City: </strong>${req.body.buss_city}</li>\n      <li><strong>Business Country: </strong>${req.body.buss_country}</li>\n      <li><strong>Payment ID: </strong>${req.body.payment_id}</li>\n      <li><strong>Payment made: </strong>${req.body.amount}</li>\n      <li><strong>Promotion Start Date: </strong>${req.body.start_date}</li>\n      <li><strong>Promotion End Date: </strong>${req.body.end_date}</li>\n    </ul>\n    `\n  };\n  transporter.sendMail(message).then(() => {\n    res.json({\n      msg: "you should receive an email"\n    });\n  }).catch(error => {\n    res.status(500).json({\n      error\n    });\n  });\n  //res.status(201).json("getBill Successfully...!");\n});\n\nrouter.post("/api/create-token", async (req, res) => {\n  const token = await stripe.tokens.create({\n    card: {\n      number: req.body.number,\n      exp_month: req.body.exp_month,\n      exp_year: req.body.exp_year,\n      cvc: req.body.cvc\n    }\n  });\n  res.json({\n    //ConfirmPaymentIntent: ConfirmPaymentIntent,\n    token: token\n  });\n});\nrouter.post("/api/checkout", async (req, res) => {\n  console.log("request::", req);\n  const customer = await stripe.customers.create({\n    name: req.body.name,\n    email: req.body.email,\n    address: {\n      line1: req.body.address,\n      postal_code: req.body.postal_code,\n      state: req.body.state,\n      country: req.body.country\n    }\n  });\n  const ephemeralKey = await stripe.ephemeralKeys.create({\n    customer: customer.id\n  }, {\n    apiVersion: "2019-02-11"\n  });\n  const paymentIntent = await stripe.paymentIntents.create({\n    amount: req.body.amount * 100,\n    currency: "usd",\n    customer: customer.id,\n    description: "Payment to the supplier",\n    automatic_payment_methods: {\n      enabled: false\n    }\n  });\n  console.log("payment intent::", paymentIntent.client_secret);\n\n  /*const ConfirmPaymentIntent = await stripe.paymentIntents.confirm(\r\n    paymentIntent.id,\r\n    { payment_method_types: ["card"] }\r\n  );*/\n\n  res.json({\n    //ConfirmPaymentIntent: ConfirmPaymentIntent,\n    paymentIntent: paymentIntent.client_secret,\n    ephemeralKey: ephemeralKey.secret,\n    customer: customer.id\n  });\n});\nconst handleErrors = err => {\n  const errors = {\n    email: ""\n  };\n  Object.values(err.errors).forEach(errEle => {\n    errProperties = errEle.properties;\n    errors["message"] = errProperties.message;\n  });\n  return errors;\n};\nmodule.exports = router;\n\n//# sourceURL=webpack://leaf-backend/./src/routes/payment.js?')},"./src/routes/user.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst User = __webpack_require__(/*! ../models/User */ "./src/models/User.js");\nconst bcrypt = __webpack_require__(/*! bcrypt */ "bcrypt");\n// const router = \nconst router = new express.Router();\nrouter.post(\'/api/signup\', async (req, res) => {\n  const user = new User(req.body);\n  try {\n    await user.save();\n    res.status(201).send(user);\n  } catch (error) {\n    if (error.code === 11000) {\n      return res.status(400).send({\n        status: 400,\n        message: "Email Already exists"\n      });\n    }\n    const errors = handleErrors(error);\n    res.status(400).send({\n      status: 401,\n      message: errors.message\n    });\n  }\n});\nrouter.post(\'/api/login\', async (req, res) => {\n  try {\n    const user = await User.findByCredentials(req.body.email, req.body.password);\n    res.send(user);\n  } catch (e) {\n    res.status(400).send();\n  }\n});\nconst handleErrors = err => {\n  const errors = {\n    email: \'\'\n  };\n  Object.values(err.errors).forEach(errEle => {\n    errProperties = errEle.properties;\n    errors["message"] = errProperties.message;\n  });\n  return errors;\n};\nmodule.exports = router;\n\n//# sourceURL=webpack://leaf-backend/./src/routes/user.js?')},bcrypt:e=>{"use strict";e.exports=require("bcrypt")},"body-parser":e=>{"use strict";e.exports=require("body-parser")},cors:e=>{"use strict";e.exports=require("cors")},dotenv:e=>{"use strict";e.exports=require("dotenv")},express:e=>{"use strict";e.exports=require("express")},mailgen:e=>{"use strict";e.exports=require("mailgen")},mongoose:e=>{"use strict";e.exports=require("mongoose")},nodemailer:e=>{"use strict";e.exports=require("nodemailer")},stripe:e=>{"use strict";e.exports=require("stripe")},uuid:e=>{"use strict";e.exports=require("uuid")},validator:e=>{"use strict";e.exports=require("validator")}},__webpack_module_cache__={};function __webpack_require__(e){var r=__webpack_module_cache__[e];if(void 0!==r)return r.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}var __webpack_exports__=__webpack_require__("./src/index.js")})();